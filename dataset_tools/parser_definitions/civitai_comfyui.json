{
  "parser_name": "Civitai ComfyUI (PNG/JPEG extraMetadata)",
  "priority": 205,
  "target_file_types": [
    "PNG",
    "JPEG"
  ],
  "detection_rules": [
    {
        "condition": "OR",
        "rules": [
            {
                "comment": "Rule 1: Must contain CivitAI URN patterns (any CivitAI resource)",
                "source_type": "any_metadata_source",
                "operator": "contains",
                "value": "urn:air:"
            },
            {
                "comment": "Rule 2: Contains smZ CLIPTextEncode nodes (Civitai custom nodes)",
                "source_type": "any_metadata_source",
                "operator": "contains",
                "value": "smZ CLIPTextEncode"
            }
        ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "exif_user_comment"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "mojibake_decode_utf16",
          "comment": "STEP 1: Fixes top-level mojibake where UTF-16LE data (common in EXIF) is misinterpreted. This is a failsafe; it should only alter the string if it detects this specific garbling."
        },
        {
          "type": "json_decode_string_itself",
          "comment": "STEP 2: Parse the main string, which is now valid JSON, into an object."
        },
        {
          "type": "filter_dict_nodes_only",
          "comment": "STEP 3: Filter workflow to keep only ComfyUI node data for extraction."
        }
      ]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "KSampler_A1111",
          "SamplerCustom",
          "SamplerCustomAdvanced"
        ],
        "positive_input_name": "positive",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode",
          "CLIPTextEncodeSDXL",
          "BNK_CLIPTextEncodeAdvanced",
          "PixArtT5TextEncode",
          "T5TextEncode",
          "CLIPTextEncodeSDXLRefiner",
          "smZ CLIPTextEncode"
        ],
        "fallback": "Could not extract prompt"
      },
      {
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "KSampler_A1111",
          "SamplerCustom",
          "SamplerCustomAdvanced"
        ],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode",
          "CLIPTextEncodeSDXL",
          "BNK_CLIPTextEncodeAdvanced",
          "PixArtT5TextEncode",
          "T5TextEncode",
          "CLIPTextEncodeSDXLRefiner",
          "smZ CLIPTextEncode"
        ],
        "fallback": ""
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["KSampler"],
        "input_field": "steps",
        "value_type": "integer",
        "fallback": 0
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["KSampler"],
        "input_field": "cfg",
        "value_type": "float",
        "fallback": 0.0
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["KSampler"],
        "input_field": "sampler_name",
        "value_type": "string",
        "fallback": "unknown"
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["KSampler"],
        "input_field": "seed",
        "value_type": "integer",
        "fallback": -1
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "EmptyLatentImage",
          "EmptyLatentImageFromPresetsSDXL",
          "EmptySD3LatentImage"
        ],
        "input_field": "width",
        "data_type": "integer",
        "fallback": 512
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "EmptyLatentImage",
          "EmptyLatentImageFromPresetsSDXL",
          "EmptySD3LatentImage"
        ],
        "input_field": "height",
        "data_type": "integer",
        "fallback": 512
      },
      {
        "target_key": "parameters.model",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["CheckpointLoaderSimple"],
        "input_field": "ckpt_name",
        "value_type": "string",
        "fallback": "Unknown Model"
      },
      {
        "target_key": "parameters.loras",
        "method": "comfy_find_all_lora_nodes",
        "lora_node_types": [
          "LoraLoader",
          "LoraLoaderModelOnly",
          "LoraTagLoader"
        ],
        "extract_fields": [
          "lora_name",
          "strength_model",
          "strength_clip"
        ],
        "fallback": []
      },
      {
        "target_key": "parameters.civitai_airs",
        "method": "direct_json_path",
        "json_path": "extra.airs",
        "value_type": "array",
        "optional": true
      },
      {
        "target_key": "parameters.civitai_extraMetadata",
        "method": "direct_json_path",
        "json_path": "extraMetadata",
        "value_type": "string",
        "optional": true
      },
      {
        "target_key": "parameters.civitai_api_info",
        "method": "civitai_extract_all_info",
        "optional": true,
        "comment": "Fetch model/version information from CivitAI API based on URN:AIR resources"
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      },
      {
        "target_key": "raw_metadata",
        "method": "comfyui_extract_raw_workflow"
      }
    ],
    "output_template": {
      "tool": "Civitai ComfyUI",
      "format": "ComfyUI Workflow (Civitai extraMetadata)",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "steps": "$parameters.steps",
        "sampler_name": "$parameters.sampler_name",
        "cfg_scale": "$parameters.cfg_scale",
        "seed": "$parameters.seed",
        "width": "$parameters.width",
        "height": "$parameters.height",
        "model": "$parameters.model",
        "loras": "$parameters.loras",
        "civitai_airs": "$parameters.civitai_airs",
        "civitai_extraMetadata": "$parameters.civitai_extraMetadata",
        "civitai_api_info": "$parameters.civitai_api_info"
      },
      "civitai_metadata": {
        "parser": "Civitai ComfyUI (PNG/JPEG extraMetadata)",
        "priority": 195,
        "confidence": "high",
        "supports_formats": [
          "PNG",
          "JPEG"
        ]
      },
      "raw_metadata": "$raw_metadata"
    }
  },
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}