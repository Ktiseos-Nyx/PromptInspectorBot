{
  "parser_name": "TensorArt_ComfyUI",
  "priority": 160,
  "description": "Parses modern TensorArt ComfyUI workflows.",
  "version": "2.0",
  "maintainer": "Gemini",
  "target_file_types": ["PNG", "JPEG", "WEBP"],
  "detection_rules": [
    {
      "comment": "Rule 1: Must be a valid ComfyUI workflow in the 'prompt' field",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "is_valid_json"
    },
    {
        "comment": "Rule 2: Must contain TensorArt specific node names as substrings",
        "source_type": "pil_info_key",
        "source_key": "prompt",
        "operator": "regex_match_any",
        "regex_patterns": [
            "KolorsCheckpointLoaderSimple",
            "TensorArtLoadChatGLM3",
            "ECHOCheckpointLoaderSimple"
        ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "transformations": [{ "type": "json_decode_string_itself" }]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfyui_extract_prompt_from_workflow"
      },
      {
        "target_key": "negative_prompt",
        "method": "comfyui_extract_negative_prompt_from_workflow"
      },
      {
        "target_key": "parameters.model",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["KolorsCheckpointLoaderSimple", "ECHOCheckpointLoaderSimple"],
        "input_field": "ckpt_name",
        "value_type": "string"
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler"],
        "input_field": "steps",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler"],
        "input_field": "cfg",
        "value_type": "float"
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler"],
        "input_field": "seed",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler"],
        "input_field": "sampler_name",
        "value_type": "string"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler"],
        "input_field": "scheduler",
        "value_type": "string"
      },
      {
        "target_key": "parameters.denoise",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler"],
        "input_field": "denoise",
        "value_type": "float"
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["EmptyLatentImage"],
        "input_field": "width",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["EmptyLatentImage"],
        "input_field": "height",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.vae",
        "method": "comfy_find_input_of_node_type",
        "node_types": ["VAELoader"],
        "input_field": "vae_name",
        "value_type": "string",
        "optional": true
      },
      {
        "target_key": "raw_metadata",
        "method": "comfyui_extract_raw_workflow"
      }
    ],
    "output_template": {
      "tool": "TensorArt",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "model": "$parameters.model",
        "seed": "$parameters.seed",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "denoise": "$parameters.denoise",
        "width": "$parameters.width",
        "height": "$parameters.height",
        "vae": "$parameters.vae"
      },
      "raw_metadata": "$raw_metadata"
    }
  }
}
